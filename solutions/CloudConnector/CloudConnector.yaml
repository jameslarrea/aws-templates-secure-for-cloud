AWSTemplateFormatVersion: "2010-09-09"
Description: Cloud Connector for AWS

Parameters:
  CloudConnectorLogRetention:
    Type: Number
    Default: 5
    Description: Days to keep logs from CloudConnector
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC where the workload is deployed
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public Subnets where the LoadBalancer will be deployed
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private Subnets where the CloudConnector will be deployed
  ECSCluster:
    Type: String
    Description: ECS Fargate Cluster where deploy the CloudConnector workload

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: !Ref CloudConnectorLogRetention

  AlertsLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref LogGroup
      LogStreamName: alerts

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-TaskRolePolicy"
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "s3:Get*"
                - "s3:List*"
                - "securityhub:GetFindings"
                - "securityhub:BatchImportFindings"
                - 'logs:DescribeLogStreams'
                - 'logs:GetLogEvents'
                - 'logs:FilterLogEvents'
                - 'logs:PutLogEvents'
              Resource: '*'

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-ExecutionRolePolicy"
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      Family: !Sub "${AWS::StackName}-CloudConnector"
      NetworkMode: awsvpc
      TaskRoleArn: !Ref TaskRole
      ExecutionRoleArn: !Ref ExecutionRole
      Cpu: 256
      Memory: 512
      Volumes:
        - Name: config
          Host: {}
      ContainerDefinitions:
        - Name: Config
          Command:
            - sh
            - -c
            - !Sub
              - "echo '${Command}'| base64 -d > /etc/cloud-connector/cloud-connector.yaml"
              - Command:
                  "Fn::Base64":
                    !Sub |
                      rules:
                        - directory:
                            path: /rules
                      ingestors:
                        - cloudtrail-sns-http:
                            url: /cloudtrail
                        - cloudtrail-http:
                            url: /cloudtrail-debug
                      notifiers:
                        - console: {}
                        - metrics: {}
                        - cloudwatch:
                            logGroup: !Ref LogGroup
                            logStream: !Ref AlertsLogStream
                        - securityhub:
                            productArn: arn:aws:securityhub:${AWS::Region}:${AWS::AccountId}:product/${AWS::AccountId}/default

          Image: busybox
          Essential: false
          MountPoints:
            - SourceVolume: config
              ContainerPath: "/etc/cloud-connector"
        - Name: CloudConnector
          DependsOn:
            - ContainerName: Config
              Condition: SUCCESS
          Image: sysdiglabs/cloud-connector
          Essential: true
          PortMappings:
            - ContainerPort: 5000
          MountPoints:
            - SourceVolume: config
              ContainerPath: "/etc/cloud-connector"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: CloudConnector public facing load balancer
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Port: 5000
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: 'forward'
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: CloudConnector workload Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  CloudConnectorService:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerListener
    Properties:
      ServiceName: CloudConnector
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets: !Ref PrivateSubnets
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: CloudConnector
          ContainerPort: 5000
          TargetGroupArn: !Ref TargetGroup
